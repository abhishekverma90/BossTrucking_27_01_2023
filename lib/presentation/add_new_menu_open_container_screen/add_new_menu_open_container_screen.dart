import 'controller/add_new_menu_open_container_controller.dart';import 'package:boss_trucking_27_01_2023/core/app_export.dart';import 'package:boss_trucking_27_01_2023/presentation/add_new_menu_open_page/add_new_menu_open_page.dart';import 'package:boss_trucking_27_01_2023/presentation/driver_profile_moving_page/driver_profile_moving_page.dart';import 'package:boss_trucking_27_01_2023/presentation/report_work_order_page/report_work_order_page.dart';import 'package:boss_trucking_27_01_2023/presentation/vehicles_menu_options_for_3_dot_menu_page/vehicles_menu_options_for_3_dot_menu_page.dart';import 'package:boss_trucking_27_01_2023/presentation/work_orders_page/work_orders_page.dart';import 'package:boss_trucking_27_01_2023/widgets/custom_bottom_bar.dart';import 'package:flutter/material.dart';class AddNewMenuOpenContainerScreen extends GetWidget<AddNewMenuOpenContainerController> {@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(backgroundColor: ColorConstant.gray50, body: Navigator(key: Get.nestedKey(1), initialRoute: AppRoutes.addNewMenuOpenPage, onGenerateRoute: (routeSetting) => GetPageRoute(page: () => getCurrentPage(routeSetting.name!), transition: Transition.noTransition)), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Get.toNamed(getCurrentRoute(type), id: 1);}))); } 
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return AppRoutes.addNewMenuOpenPage; case BottomBarEnum.Vehicles: return AppRoutes.vehiclesMenuOptionsFor3DotMenuPage; case BottomBarEnum.Driver: return AppRoutes.driverProfileMovingPage; case BottomBarEnum.Workorder: return AppRoutes.workOrdersPage; case BottomBarEnum.Report: return AppRoutes.reportWorkOrderPage; default: return "/";} } 
Widget getCurrentPage(String currentRoute) { switch (currentRoute) {case AppRoutes.addNewMenuOpenPage: return AddNewMenuOpenPage(); case AppRoutes.vehiclesMenuOptionsFor3DotMenuPage: return VehiclesMenuOptionsFor3DotMenuPage(); case AppRoutes.driverProfileMovingPage: return DriverProfileMovingPage(); case AppRoutes.workOrdersPage: return WorkOrdersPage(); case AppRoutes.reportWorkOrderPage: return ReportWorkOrderPage(); default: return DefaultWidget();} } 
 }
